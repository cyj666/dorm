<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- shiro的缓存管理器 使用Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
			spring没有导入ehcache.xml时，自己导入 -->
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>

	<!-- 缓存管理 -->
	<!--<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean> -->

	<!-- 会话cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- <constructor-arg name="name" value="meta.session.id"/> -->
		<constructor-arg value="sid" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="180000" />
		<property name="path" value="/" />

	</bean>
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="2592000" /><!-- 30天 -->
	</bean>

	<!--rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('6ZmI6I2j5Y+R5aSn5ZOlAA==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>


	<!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
	<!-- 凭证匹配器 -->
	<!-- <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"></bean> -->
	<bean id="credentialsMatcher"
		class="com.dorm.credentialsmatcher.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="cacheManager" />
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="1" />
		<property name="hashSalted" value="false" />
		<property name="storedCredentialsHexEncoded" value="true" />

	</bean>




	<!-- Realm实现 -->
	<bean id="jdbcRealm" class="com.dorm.realm.UserRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
		<property name="permissionsLookupEnabled" value="true"></property>
		<property name="dataSource" ref="dataSource"></property>
		<property name="authenticationQuery"
			value="SELECT password FROM users WHERE username = ?"></property>
		<property name="cacheManager" ref="cacheManager" />
		<property name="cachingEnabled" value="true" />
		<property name="authenticationCachingEnabled" value="true" />
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="authorizationCache" />
		<!-- <property name="userService" ref="userService"/> <property name="credentialsMatcher" 
			ref="credentialsMatcher"/> <property name="cachingEnabled" value="true"/> 
			<property name="authenticationCachingEnabled" value="true"/> <property name="authenticationCacheName" 
			value="authenticationCache"/> <property name="authorizationCachingEnabled" 
			value="true"/> <property name="authorizationCacheName" value="authorizationCache"/> -->
	</bean>


	<!-- 会话ID生成器 -->
	<bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- 会话DAO，sessionManager里面的session需要保存在会话Dao里，没有会话Dao，session是瞬时的，没法从 sessionManager里面拿到session，
	开关，目前实现方式有两种：
	1、shiro自带的EnterpriseCacheSessionDAO(org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO)，只要实例化就好了；
	2、自己编写的RedisSessionDao，实例化就好了(com.dorm.sessionDao.RedisSessionDao)；-->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO ">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>

	<!-- 会话验证调度器 -->
	<!-- <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler"> 
		<property name="sessionValidationInterval" value="1800000"/> <property name="sessionManager" 
		ref="sessionManager"/> </bean> -->
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler ">
		<property name="interval" value="1800000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>


	<!-- 会话管理器 -->
	<!--<bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager"> -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="1800000" />
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<property name="sessionDAO" ref="sessionDAO" />
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionListeners" ref="mySessionListener" />
	</bean>

	  <bean id="mySessionListener" class="com.dorm.listener.MySessionListener"></bean>

	<!-- Shiro安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jdbcRealm"></property>
		<property name="cacheManager" ref="cacheManager"></property>
		<property name="sessionManager" ref="sessionManager" />
	</bean>


	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<bean id="kickoutSessionControlFilter" class="com.dorm.filter.KickoutSessionControlFilter">
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="kickoutAfter" value="false" />
		<property name="maxSession" value="1" />
		<property name="kickoutUrl" value="login?kickout=1" />
	</bean>

	<bean id="forceLogoutFilter" class="com.dorm.filter.ForceLogoutFilter"></bean>
	
	<!-- redis实现的共享session过滤器，如果要用取消下面注释 -->
	<!-- <bean id="ssoFilter" class="com.dorm.filter.SSOFilter"></bean>-->

	<!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口，这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/login"></property>
		<!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
		<!-- <property name="successUrl" value="/" ></property> -->
		<!-- 用户访问未对其授权的资源时，所显示的连接 -->
		<property name="unauthorizedUrl" value="/"></property>
		<property name="filters">
			<map>
				<entry key="kickout" value-ref="kickoutSessionControlFilter" />
				<entry key="force" value-ref="forceLogoutFilter"></entry>
				<!-- 注意开启时，下面的/login=sso,anon 和/**=sso,kickout,force
				<entry key="sso" value-ref="ssoFilter"></entry> -->
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/login=anon
				/captchaCode=anon
				/main=user
				/room=user
				/**=kickout,force
			</value>
		</property>
	</bean>

	<bean id="formAuthenticationFilter"
		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="rememberMeParam" value="rememberMe"></property>
	</bean>

	<!--默认过滤器(10个) anon - org.apache.shiro.web.filter.authc.AnonymousFilter 
		authc - org.apache.shiro.web.filter.authc.FormAuthenticationFilter authcBasic 
		- org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter perms - 
		org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter port - org.apache.shiro.web.filter.authz.PortFilter 
		rest - org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter roles 
		- org.apache.shiro.web.filter.authz.RolesAuthorizationFilter ssl - org.apache.shiro.web.filter.authz.SslFilter 
		user - org.apache.shiro.web.filter.authc.UserFilter logout - org.apache.shiro.web.filter.authc.LogoutFilter 
		anon:例子/admins/**=anon 没有参数，表示可以匿名使用。 authc:例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数 
		roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。 
		perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。 
		rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] 
		,其中method为post，get，delete等。 port：例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。 
		authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证 ssl:例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https 
		user:例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查 关于Shiro的标签应用： <shiro:authenticated> 
		登录之后 <shiro:notAuthenticated> 不在登录状态时 <shiro:guest> 用户在没有RememberMe时 <shiro:user> 
		用户在RememberMe时 <shiro:hasAnyRoles name="abc,123" > 在有abc或者123角色时 <shiro:hasRole 
		name="abc"> 拥有角色abc <shiro:lacksRole name="abc"> 没有角色abc <shiro:hasPermission 
		name="abc"> 拥有权限abc <shiro:lacksPermission name="abc"> 没有权限abc <shiro:principal> 
		显示用户登录名 -->




	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类， 
		并在必要时进行安全逻辑验证 -->

	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean> 
		<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager"></property> </bean> -->

</beans>  