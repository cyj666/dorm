<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dorm.mapper.UserMapper">
 	<!-- <cache type = "org.mybatis.caches.ehcache.EhcacheCache"/>--> 
 	<cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>

	<resultMap id="userMap" type="com.dorm.pojo.User">  
    <id property="userId" column="user_id"/>  
    <result property="username" column="username"/>  
    <result property="password" column="password"/>  
    <result property="locked" column="locked"/>  
    <result property="status" column="status"/> 
    <result property="lastTime" column="last_time"/> 
    <result property="lastIp" column="last_ip"/> 
    <!-- 进行 多表关联插叙，先关联user和role -->  
    <collection property="roleSet" column="role_id" ofType="com.dorm.pojo.Role">  
    <id property="roleId" column="role_id"/>  
    <result property="roleName" column="role_name"/>  
     <result property="roleDesc" column="role_desc"/>  
    <!-- 再在role中关联role和permission -->  
    <collection property="permissionSet" column="permission_id" ofType="com.dorm.pojo.Permission">  
    <id property="permissionId" column="permission_id"/>  
    <result property="permissionName" column="permission_name"/>  
    <result property="permissionDesc" column="permission_desc"/>  
    </collection>  
    </collection>  
      
    </resultMap> 

	<select id="getUserDetails" resultMap="userMap" parameterType="String">
	SELECT *
	FROM users u 
	LEFT JOIN users_roles ur ON u.user_id = ur.user_id 
	LEFT JOIN roles r ON r.role_id = ur.role_id
	LEFT JOIN roles_permissions rp ON rp.role_id = r.role_id
	LEFT JOIN permissions p ON p.permission_id = rp.permission_id
	WHERE u.username = #{username}
	</select>

	<select id="getUser" resultType="User" parameterType="user">
		select * from users
		<where>
		<if test="userId != null and userId !='' ">
       	and user_id = #{userId}
        </if>
        <if test="username != null and username !='' ">
       	and username = #{username}
        </if>
		</where>
	</select> 
	
	<select id="getUsers" resultType="User" parameterType="user"  useCache="false">
		select * from users
		<where>
		<if test="userId != null and userId !='' ">
       	and user_id = #{userId}
        </if>
        <if test="username != null and username !='' ">
       	and username = #{username}
        </if>
		</where>
	</select> 
	
	<select id="getAllUser" resultType="User" >
		select * from users		
	</select> 
	

	<insert id="addUser" useGeneratedKeys="true" keyProperty="user_id" parameterType="user">
		insert into
		users(username,password,status,locked,last_time,create_time,last_ip)
		values(#{username},#{password},#{status},#{locked},#{lastTime},#{createTime},#{lastIp})
	</insert>


	<delete id="deleteUser" parameterType="user">
        delete  from users 
		<where>
        <if test="userId != null and userId !='' ">
       	and user_id = #{userId}
        </if>
        <if test="username != null and username !='' ">
       	and username = #{username}
        </if>
        </where>
    </delete>
         
    <update id="updateUser" parameterType="user">
    update users
    <set>
    	<if test="username != null and username !=''">
    	username = #{username},
    	</if>
    	<if test="password != null and password !=''">
    	password = #{password},
    	</if>
    	<if test="status != null ">
    	status = #{status},
    	</if>
    	<if test="locked != null and locked !=''">
    	locked = #{locked},
    	</if>   	
    	<if test="lastTime != null and lastTime !=''">
    	last_time = #{lastTime},
    	</if>
    	<if test="lastIp != null and lastIp !=''">
    	last_ip = #{lastIp}
    	</if>
    </set>
    <where>
    	user_id =#{userId}
    </where>  
    </update>
    
    <!--================================================================================================================ -->
    
    <insert id="addUserRole" useGeneratedKeys="true"  parameterType="int">
		insert into
		users_roles(user_id,role_id)
		values(#{userId},#{roleId})
	</insert>
	
	 <insert id="addRolePermision" useGeneratedKeys="true" parameterType="int">
		insert into
		roles_permissions(role_id,permission_id)
		values(#{roleId},#{permissionId})
	</insert>
   
    <delete id="deleteUserRole" parameterType="int">
		 delete  from users_roles 
		<where>        
       	user_id = #{userId}      
       	and role_id = #{roleId}
        </where>
	</delete>
	
 	<delete id="deleteRolePermision" parameterType="int">
		 delete  from roles_permissions 
		<where>        
			role_id = #{roleId} 
			and permission_id = #{permissionId}
        </where>
	</delete>
	
	
    
</mapper>